{
    "StartAt": "BuildProject",
    "States": {

        "BuildProject": {
            "Type": "Task",
            "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
            "Parameters": {
                "ProjectName": "${CodeBuild::Project}",
                "EnvironmentVariablesOverride": [
                    {
                        "Name": "PROJECT_SOURCE",
                        "Type": "PLAINTEXT",
                        "Value.$": "States.Format('s3://${BuildBucket}/{}', $.ProjectPath)"
                    }
                ]
            },
            "ResultSelector": {
                "BuildStatus.$": "$.Build.BuildStatus",
                "BuildId.$": "$.Build.Id"
            },
            "ResultPath": "$.BuildProject",
            "Next": "CheckBuildOutcome"
        },

        "CheckBuildOutcome": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.BuildProject.BuildStatus",
                    "StringEquals": "SUCCEEDED",
                    "Next": "GetListOfMeasurements"
                }
            ],
            "Default": "BuildFailed"
        },

        "GetListOfMeasurements": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ListArtifactsFunction}",
                "Payload": {
                    "BuildId.$": "$.BuildProject.BuildId"
                }
            },
            "ResultSelector": {
                "RunSpecs.$": "$.Payload.RunSpecs"
            },
            "ResultPath": "$.GetListOfMeasurements",
            "Next": "FanOutTests"
        },

        "FanOutTests": {
            "Type": "Map",
            "ItemsPath": "$.GetListOfMeasurements.RunSpecs",
            "MaxConcurrency": ${Parallelism},
            "Parameters": {
                "RunSpec.$": "$$.Map.Item.Value",
                "BuildId.$": "$.BuildProject.BuildId"
            },
            "Iterator": {
                "StartAt": "ReadRunSpec",
                "States": {
                    "ReadRunSpec": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${ReadRunSpec}",
                            "Payload": {
                                "RunSpec.$": "$.RunSpec"
                            }
                        },
                        "ResultSelector": {
                            "Success.$": "$.Payload.Success",
                            "RunSpec.$": "$.Payload.RunSpec",
                            "Build.$": "$.Payload.Build"
                        },
                        "ResultPath": "$.ReadRunSpec",
                        "Next": "CreateFunction"
                    },

                    "CreateFunction": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${CreateFunction}",
                            "Payload": {
                                "RunSpec.$": "$.ReadRunSpec.RunSpec"
                            }
                        },
                        "ResultSelector": {
                            "Success.$": "$.Payload.Success",
                            "LambdaName.$": "$.Payload.LambdaName"
                        },
                        "ResultPath": "$.CreateFunction",
                        "Next": "RunMeasurement"
                    },

                    "RunMeasurement": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${MeasureFunction}",
                            "Payload": {
                                "LambdaName.$": "$.CreateFunction.LambdaName",
                                "RunSpec.$": "$.ReadRunSpec.RunSpec",
                                "Build.$": "$.ReadRunSpec.Build",
                                "BuildId.$": "$.BuildId"
                            }
                        },
                        "ResultSelector": {
                            "Success.$": "$.Payload.Success",
                            "Continue.$": "$.Payload.Continue",
                            "RateExceeded.$": "$.Payload.RateExceeded"
                        },
                        "ResultPath": "$.RunMeasurement",
                        "Next": "CheckContinue"
                    },

                    "CheckContinue": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.RunMeasurement.Continue",
                                "BooleanEquals": true,
                                "Next": "CheckRateExceeded"
                            }
                        ],
                        "Default": "WaitBeforeDestroyFunction"
                    },

                    "CheckRateExceeded": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.RunMeasurement.RateExceeded",
                                "BooleanEquals": true,
                                "Next": "DelayRunMeasurement"
                            }
                        ],
                        "Default": "RunMeasurement"
                    },

                    "DelayRunMeasurement": {
                        "Type": "Wait",
                        "Seconds": 60,
                        "Next": "RunMeasurement"
                    },

                    "WaitBeforeDestroyFunction": {
                        "Type": "Wait",
                        "Seconds": 60,
                        "Next": "DestroyFunction"
                    },

                    "DestroyFunction": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${DestroyFunction}",
                            "Payload": {
                                "LambdaName.$": "$.CreateFunction.LambdaName"
                            }
                        },
                        "ResultSelector": {
                            "Success.$": "$.Payload.Success"
                        },
                        "ResultPath": "$.DestroyFunction",
                        "End": true
                    }
                }
            },
            "ResultPath": "$.Functions",
            "Next": "WaitForMeasurementsToSettle"
        },

        "WaitForMeasurementsToSettle": {
            "Type": "Wait",
            "Seconds": 10,
            "Next": "CombineMeasurements"
        },

        "CombineMeasurements": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${CombineMeasurementsFunction}",
                "Payload": {
                    "BuildId.$": "$.BuildProject.BuildId"
                }
            },
            "ResultSelector": {
                "MeasurementFile.$": "$.Payload.MeasurementFile"
            },
            "ResultPath": "$.CombineMeasurements",
            "Next": "BuildSuccess"
        },

        "BuildFailed": {
            "Type": "Fail"
        },

        "BuildSuccess": {
            "Type": "Succeed"
        }
    }
}