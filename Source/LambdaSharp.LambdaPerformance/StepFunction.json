{
    "StartAt": "ClearBucket",
    "States": {
        "ClearBucket": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ClearBucketFunction}",
                "Payload": { }
            },
            "ResultSelector": { },
            "ResultPath": "$.ClearBucket",
            "Next": "StartBuild"
        },

        "StartBuild": {
            "Type": "Task",
            "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
            "Parameters": {
                "ProjectName": "${CodeBuild::Project}"
            },
            "Next": "CheckBuildOutcome"
        },

        "CheckBuildOutcome": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.Build.BuildStatus",
                    "StringEquals": "SUCCEEDED",
                    "Next": "GetListOfArtifacts"
                }
            ],
            "Default": "BuildFailed"
        },

        "GetListOfArtifacts": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ListArtifactsFunction}",
                "Payload": { }
            },
            "ResultSelector": {
                "RunSpecs.$": "$.Payload.RunSpecs"
            },
            "ResultPath": "$.Functions",
            "Next": "FanOutTests"
        },

        "FanOutTests": {
            "Type": "Map",
            "ItemsPath": "$.Functions.RunSpecs",
            "Parameters": {
                "Project.$": "$$.Map.Item.Value.Project",
                "Handler.$": "$$.Map.Item.Value.Handler",
                "ZipFile.$": "$$.Map.Item.Value.ZipFile",
                "ZipSize.$": "$$.Map.Item.Value.ZipSize",
                "Runtime.$": "$$.Map.Item.Value.Runtime",
                "Architecture.$": "$$.Map.Item.Value.Architecture",
                "Payload.$": "$$.Map.Item.Value.Payload",
                "MemorySize": 256,
                "Runs.$": "$.Runs"
            },
            "Iterator": {
                "StartAt": "RunTest",
                "States": {
                    "RunTest": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${MeasureFunction}",
                            "Payload.$": "$"
                        },
                        "ResultSelector": {
                            "InitDurationMax.$": "$.Payload.InitDurationMax",
                            "InitDurationMin.$": "$.Payload.InitDurationMin",
                            "InitDurationAverage.$": "$.Payload.InitDurationAverage",
                            "InitDurationStdDev.$": "$.Payload.InitDurationStdDev",
                            "InitDurationMedian.$": "$.Payload.InitDurationMedian",
                            "UsedDurationMax.$": "$.Payload.UsedDurationMax",
                            "UsedDurationMin.$": "$.Payload.UsedDurationMin",
                            "UsedDurationAverage.$": "$.Payload.UsedDurationAverage",
                            "UsedDurationStdDev.$": "$.Payload.UsedDurationStdDev",
                            "UsedDurationMedian.$": "$.Payload.UsedDurationMedian",
                            "Details.$": "$.Payload.Details"
                        },
                        "ResultPath": "$.Measurements",
                        "End": true
                    }
                }
            },
            "ResultPath": "$.Functions",
            "Next": "BuildSuccess"
        },

        "BuildFailed": {
            "Type": "Fail"
        },

        "BuildSuccess": {
            "Type": "Succeed"
        }
    }
}